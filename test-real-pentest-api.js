const puppeteer = require('puppeteer');

async function testRealPentestAPI() {
  console.log('üîç Testing REAL PentestTools API Integration via CORS');
  console.log('====================================================\n');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized', '--disable-web-security', '--disable-features=VizDisplayCompositor'],
    timeout: 60000
  });
  
  try {
    const page = await browser.newPage();
    
    // Navigate to the frontend to use the CORS implementation
    console.log('üìÑ Loading frontend...');
    await page.goto('http://localhost:3002', { 
      waitUntil: 'networkidle0',
      timeout: 30000
    });
    
    // Inject and test the real API call
    console.log('üåê Testing real PentestTools API via CORS...');
    
    const apiTest = await page.evaluate(async () => {
      try {
        // Use the exact same implementation as the platform
        const API_KEY = '43cIriuvQ9qEeFFaYbFDKpfzwLWuUA92tq7sOpzJ046a87e7';
        const API_URL = 'https://app.pentest-tools.com/api/v2';
        
        console.log('Making direct CORS request to PentestTools API...');
        
        // Test API connection
        const response = await fetch(`${API_URL}/tools`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${API_KEY}`,
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          mode: 'cors',
        });
        
        console.log('Response status:', response.status);
        const responseText = await response.text();
        console.log('Response text:', responseText.substring(0, 200));
        
        if (!response.ok) {
          return {
            success: false,
            error: `API Error ${response.status}: ${responseText}`,
            status: response.status
          };
        }
        
        const data = JSON.parse(responseText);
        return {
          success: true,
          data: data,
          toolCount: data.data ? data.data.length : 0
        };
        
      } catch (error) {
        console.error('API test failed:', error);
        return {
          success: false,
          error: error.message,
          type: error.name
        };
      }
    });
    
    console.log('\nüìä REAL API TEST RESULTS:');
    console.log('========================');
    
    if (apiTest.success) {
      console.log('‚úÖ PentestTools API is working!');
      console.log(`‚úÖ Found ${apiTest.toolCount} available tools`);
      console.log('‚úÖ Authentication successful');
      console.log('‚úÖ CORS working properly');
      
      // Now test a real scan
      console.log('\nüîç Testing real SSL scan...');
      
      const scanTest = await page.evaluate(async () => {
        try {
          const API_KEY = '43cIriuvQ9qEeFFaYbFDKpfzwLWuUA92tq7sOpzJ046a87e7';
          const API_URL = 'https://app.pentest-tools.com/api/v2';
          
          // Create a target first
          const targetResponse = await fetch(`${API_URL}/targets`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${API_KEY}`,
              'Content-Type': 'application/json',
              'Accept': 'application/json',
            },
            mode: 'cors',
            body: JSON.stringify({
              name: 'cobytes.com',
              description: 'Test scan target'
            })
          });
          
          const targetText = await targetResponse.text();
          console.log('Target creation response:', targetText);
          
          if (targetResponse.ok) {
            const targetData = JSON.parse(targetText);
            const targetId = targetData.data.id;
            
            // Start SSL scan
            const scanResponse = await fetch(`${API_URL}/scans`, {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${API_KEY}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json',
              },
              mode: 'cors',
              body: JSON.stringify({
                tool_id: 110, // SSL Scanner
                target_id: targetId,
                tool_params: {
                  target: 'cobytes.com'
                }
              })
            });
            
            const scanText = await scanResponse.text();
            console.log('Scan creation response:', scanText);
            
            return {
              success: scanResponse.ok,
              targetId: targetId,
              response: scanText,
              status: scanResponse.status
            };
          } else {
            return {
              success: false,
              error: targetText,
              status: targetResponse.status
            };
          }
          
        } catch (error) {
          return {
            success: false,
            error: error.message
          };
        }
      });
      
      if (scanTest.success) {
        console.log('‚úÖ Real scan started successfully!');
        console.log('‚úÖ This is ACTUAL data from PentestTools API');
        console.log('‚úÖ NO MOCK DATA - completely real');
      } else {
        console.log('‚ùå Scan creation failed:', scanTest.error);
      }
      
    } else {
      console.log('‚ùå PentestTools API failed:');
      console.log(`   Error: ${apiTest.error}`);
      console.log(`   Type: ${apiTest.type}`);
      console.log(`   Status: ${apiTest.status}`);
      
      if (apiTest.error.includes('CORS')) {
        console.log('   ‚Üí CORS issue detected');
      } else if (apiTest.status === 401 || apiTest.status === 403) {
        console.log('   ‚Üí Authentication issue - API key may be invalid');
      } else {
        console.log('   ‚Üí Unknown API issue');
      }
    }
    
    // Keep browser open for 15 seconds to inspect
    await new Promise(resolve => setTimeout(resolve, 15000));
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  } finally {
    await browser.close();
  }
}

testRealPentestAPI().catch(console.error);