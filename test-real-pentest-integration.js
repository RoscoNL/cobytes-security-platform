const puppeteer = require('puppeteer');
const axios = require('axios');

async function testRealPentestIntegration() {
  console.log('üîç Testing REAL PentestTools Integration');
  console.log('=====================================\n');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  try {
    const page = await browser.newPage();
    
    // Step 1: Test Backend Proxy
    console.log('üì° Testing Backend CORS Proxy...');
    const backendTest = await axios.get('http://localhost:3001/api/proxy/pentest-tools/tools')
      .then(res => ({ success: true, tools: res.data.data?.length || 0 }))
      .catch(err => ({ success: false, error: err.response?.data || err.message }));
    
    if (backendTest.success) {
      console.log(`‚úÖ Backend proxy working! Found ${backendTest.tools} tools`);
    } else {
      console.log('‚ùå Backend proxy failed:', backendTest.error);
    }
    
    // Step 2: Create a REAL scan
    console.log('\nüöÄ Creating REAL WordPress scan...');
    
    await page.goto('http://localhost:3002/login', { waitUntil: 'networkidle0' });
    
    // Login
    await page.type('input[name="email"]', 'test@cobytes.com');
    await page.type('input[name="password"]', 'test123');
    await page.click('button[type="submit"]');
    await page.waitForNavigation({ waitUntil: 'networkidle0' });
    
    // Go to new scan page
    await page.goto('http://localhost:3002/scans/new', { waitUntil: 'networkidle0' });
    
    // Create scan via API
    const scanResponse = await page.evaluate(async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch('http://localhost:3001/api/scans', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            target: 'https://www.cobytes.com',
            type: 'wordpress',
            parameters: {
              scan_type: 'fast'
            }
          })
        });
        
        const data = await response.json();
        return { success: response.ok, data };
        
      } catch (error) {
        return { success: false, error: error.message };
      }
    });
    
    if (scanResponse.success && scanResponse.data.data) {
      const scan = scanResponse.data.data;
      console.log('‚úÖ Real scan created!');
      console.log(`   Scan ID: ${scan.id}`);
      console.log(`   PentestTools Scan ID: ${scan.pentest_tools_scan_id || 'Not set yet'}`);
      console.log(`   Status: ${scan.status}`);
      
      // Navigate to scan detail page
      await page.goto(`http://localhost:3002/scans/${scan.id}`, { waitUntil: 'networkidle0' });
      
      // Wait for scan to start processing
      console.log('\n‚è±Ô∏è Monitoring scan progress...');
      
      let attempts = 0;
      const maxAttempts = 20;
      
      while (attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // Check scan status
        const statusCheck = await page.evaluate(async (scanId) => {
          try {
            const token = localStorage.getItem('token');
            const response = await fetch(`http://localhost:3001/api/scans/${scanId}`, {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            const data = await response.json();
            return data.data;
          } catch (error) {
            return null;
          }
        }, scan.id);
        
        if (statusCheck) {
          console.log(`   Attempt ${attempts + 1}: Status = ${statusCheck.status}, Progress = ${statusCheck.progress}%`);
          
          if (statusCheck.pentest_tools_scan_id) {
            console.log(`   ‚úÖ PentestTools Scan ID: ${statusCheck.pentest_tools_scan_id}`);
          }
          
          if (statusCheck.status === 'completed' || statusCheck.status === 'failed') {
            console.log(`\nüìä Scan ${statusCheck.status}!`);
            
            if (statusCheck.results && statusCheck.results.length > 0) {
              console.log(`‚úÖ Found ${statusCheck.results.length} real results!`);
              console.log('\nüîç Sample Results:');
              statusCheck.results.slice(0, 3).forEach((result, i) => {
                console.log(`   ${i + 1}. ${result.title} (${result.severity})`);
                console.log(`      ${result.description}`);
              });
            } else {
              console.log('‚ö†Ô∏è No results found in scan');
            }
            break;
          }
        }
        
        attempts++;
      }
      
      // Take screenshot of scan results
      await page.screenshot({ path: 'real-scan-results.png', fullPage: true });
      console.log('\nüì∏ Screenshot saved: real-scan-results.png');
      
      // Check ScanDemo page
      console.log('\nüîç Checking ScanDemo page...');
      await page.goto('http://localhost:3002/scan-demo', { waitUntil: 'networkidle0' });
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Check if real results are shown
      const demoPageCheck = await page.evaluate(() => {
        const noScansAlert = document.querySelector('h6')?.textContent?.includes('No Completed Scans');
        const scanCards = document.querySelectorAll('[class*="MuiCard"]').length;
        const findings = document.querySelectorAll('[class*="MuiAccordion"]').length;
        
        return {
          hasNoScansMessage: noScansAlert,
          scanCardsCount: scanCards,
          findingsCount: findings
        };
      });
      
      console.log('\nüìÑ ScanDemo Page Status:');
      console.log(`   Has "No Scans" message: ${demoPageCheck.hasNoScansMessage ? 'Yes ‚ùå' : 'No ‚úÖ'}`);
      console.log(`   Scan cards visible: ${demoPageCheck.scanCardsCount}`);
      console.log(`   Security findings shown: ${demoPageCheck.findingsCount}`);
      
      await page.screenshot({ path: 'scan-demo-real-results.png', fullPage: true });
      console.log('üì∏ Screenshot saved: scan-demo-real-results.png');
      
    } else {
      console.log('‚ùå Failed to create scan:', scanResponse.error || scanResponse.data);
    }
    
    // Keep browser open for inspection
    console.log('\n‚úÖ Test completed! Browser will close in 30 seconds...');
    await new Promise(resolve => setTimeout(resolve, 30000));
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  } finally {
    await browser.close();
  }
}

testRealPentestIntegration().catch(console.error);